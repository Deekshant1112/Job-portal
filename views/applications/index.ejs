<h1>Job Applications</h1>
<div class="filter-controls">
  <input type="text" id="searchInput" placeholder="Search by name, email, or job title..." />
  <select id="statusFilter">
    <option value="">All Status</option>
    <option value="pending">Pending</option>
    <option value="reviewed">Reviewed</option>
    <option value="accepted">Accepted</option>
    <option value="rejected">Rejected</option>
  </select>
</div>
<div id="notification" class="notification"></div>
<% if (applications.length === 0) { %>
  <p>No applications found.</p>
<% } else { %>
  <table id="applicationsTable">
    <thead>
      <tr>
        <th>Job Title</th>
        <th>Applicant Name</th>
        <th>Email</th>
        <th>Phone</th>
        <th>Cover Letter</th>
        <th>Resume</th>
        <th>Application Date</th>
        <th>Status</th>
        <th>Contact Mail</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <% applications.forEach(app => { %>
        <tr data-app-id="<%= app.id %>">
          <td><%= app.Job ? app.Job.title : 'Job Not Found' %></td>
          <td>
            <%= app.Applicant ? `${app.Applicant.first_name} ${app.Applicant.last_name}` : 'Applicant Not Found' %>
          </td>
          <td><%= app.Applicant ? app.Applicant.email : 'N/A' %></td>
          <td><%= app.Applicant && app.Applicant.phone ? app.Applicant.phone : 'N/A' %></td>
          <td><%= app.cover_letter || 'None' %></td>
          <td>
            <% if (app.Applicant && app.Applicant.resume_url) { %>
              <a href="<%= app.Applicant.resume_url %>" target="_blank">View Resume</a>
            <% } else { %>
              None
            <% } %>
          </td>
          <td><%= app.application_date.toLocaleDateString() %></td>
          <td>
            <select class="status-select" data-app-id="<%= app.id %>" onchange="updateStatus(this, '<%= app.status || 'pending' %>')">
              <option value="pending" <%= (app.status || 'pending') === 'pending' ? 'selected' : '' %>>Pending</option>
              <option value="reviewed" <%= (app.status || 'pending') === 'reviewed' ? 'selected' : '' %>>Reviewed</option>
              <option value="accepted" <%= (app.status || 'pending') === 'accepted' ? 'selected' : '' %>>Accepted</option>
              <option value="rejected" <%= (app.status || 'pending') === 'rejected' ? 'selected' : '' %>>Rejected</option>
            </select>
          </td>
          <td>
            <% if (app.status === 'accepted' && app.Applicant && app.Applicant.email) { %>
                <span 
                  onclick="sendEmail(<%= app.id %>)"
                  title="Send acceptance email"
                  style="
                    font-family: 'Material Icons';
                    font-size: 24px;
                    cursor: pointer;
                    background: linear-gradient(45deg, #d93025, #34a853, #4285f4, #fbbc05);
                    -webkit-background-clip: text;
                    -webkit-text-fill-color: transparent;
                    display: inline-block;
                  "
                >
                  mail
                </span>
              <% } else { %>
              
              -
            <% } %>
          </td>
          <td>
            <button class="delete-btn" onclick="deleteApplication(<%= app.id %>)">Delete</button>
          </td>
        </tr>
      <% }) %>
    </tbody>
  </table>
<% } %>
<a href="/jobs">Back to Jobs</a>

<!-- Include Font Awesome for mail icon -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">\
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">


<style>
  .notification {
    display: none;
    padding: 10px;
    margin-bottom: 15px;
    border-radius: 4px;
    font-size: 0.9rem;
  }
  .notification.success {
    background: #d1fae5;
    color: #065f46;
  }
  .notification.error {
    background: #fee2e2;
    color: #991b1b;
  }
</style>

<script>
  // Log raw status values
  <% applications.forEach(app => { %>
    console.log(`Raw status for app <%= app.id %>: "<%= app.status %>"`); 
  <% }) %>

  function showNotification(message, type) {
    const notification = document.getElementById('notification');
    notification.textContent = message;
    notification.className = `notification ${type}`;
    notification.style.display = 'block';
    setTimeout(() => {
      notification.style.display = 'none';
    }, 3000);
  }

  
  async function updateStatus(select) {
  const appId = select.dataset.appId || '';
  const status = select.value;

  const validStatuses = ['pending', 'reviewed', 'accepted', 'rejected'];

  console.log(`[updateStatus] App ID: "${appId}", Selected status: "${status}"`);

  if (!appId || isNaN(parseInt(appId))) {
    console.warn(`Invalid appId: "${appId}"`);
    showNotification('Invalid application ID', 'error');
    return;
  }

  if (!status || status === 'undefined' || !validStatuses.includes(status)) {
    console.warn(`Invalid status: "${status}"`);
    showNotification(`Invalid status selected: "${status || 'none'}"`, 'error');
    return;
  }

  try {
    const response = await fetch(`/applications/${appId}/status`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ status }),
     

    });

    const data = await response.json();

    if (data.success) {
      showNotification('Status updated successfully', 'success');
    } else {
      showNotification(data.error || 'Failed to update status', 'error');
    }
  } catch (err) {
    console.error(`[updateStatus] Error: ${err.message}`);
    showNotification('Error updating status', 'error');
  }
}

  async function deleteApplication(appId) {
    if (!confirm('Are you sure you want to delete this application?')) return;
    try {
      const response = await fetch(`/applications/${appId}`, {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
      });
      const data = await response.json();
      if (data.success) {
        document.querySelector(`tr[data-app-id="${appId}"]`).remove();
        showNotification('Application deleted successfully', 'success');
      } else {
        showNotification(data.error || 'Failed to delete application', 'error');
      }
    } catch (error) {
      showNotification('Error deleting application: ' + error.message, 'error');
    }
  }

  // Search and filter
  const searchInput = document.getElementById('searchInput');
  const statusFilter = document.getElementById('statusFilter');
  const table = document.getElementById('applicationsTable');
  const rows = table ? table.querySelectorAll('tbody tr') : [];

  function filterTable() {
    const searchTerm = searchInput.value.toLowerCase();
    const status = statusFilter.value;

    rows.forEach(row => {
      const jobTitle = row.cells[0].textContent.toLowerCase();
      const name = row.cells[1].textContent.toLowerCase();
      const email = row.cells[2].textContent.toLowerCase();
      const rowStatus = row.cells[7].querySelector('select').value;

      const matchesSearch = jobTitle.includes(searchTerm) || name.includes(searchTerm) || email.includes(searchTerm);
      const matchesStatus = !status || rowStatus === status;

      row.style.display = matchesSearch && matchesStatus ? '' : 'none';
    });
  }

  if (searchInput && statusFilter) {
    searchInput.addEventListener('input', filterTable);
    statusFilter.addEventListener('change', filterTable);
  }

  async function sendEmail(appId) {
    if (!confirm('Send acceptance email to this applicant?')) return;

    console.log(`[sendEmail] Sending email for application ${appId}`);

    try {
      const response = await fetch(`/applications/${appId}/send-email`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
      });

      console.log(`[sendEmail] Response status: ${response.status}`);

      if (!response.ok) {
        const errorText = await response.text();
        console.warn(`[sendEmail] Server error: ${response.status} - ${errorText}`);
        throw new Error(
          response.status === 404 ? 'Application not found' :
          response.status === 400 ? 'Invalid request' :
          `Server error: ${response.status}`
        );
      }

      const data = await response.json();
      console.log(`[sendEmail] Response data:`, data);

      if (data.success) {
        showNotification('Email sent successfully', 'success');
      } else {
        showNotification(data.error || 'Failed to send email', 'error');
      }
    } catch (error) {
      console.error(`[sendEmail] Error: ${error.message}`);
      if (error.message.includes('Failed to fetch')) {
        showNotification('Cannot connect to server. Please ensure itâ€™s running on localhost:3000.', 'error');
      } else {
        showNotification(error.message || 'Error sending email', 'error');
      }
    }
  }
</script>